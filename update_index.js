import fetch from 'node-fetch';
import fs from 'fs';
import { Octokit } from '@octokit/rest';
import dotenv from 'dotenv';

dotenv.config();

// --- –ù–û–í–û: –î–∏–Ω–∞–º–∏—á–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ —É—Ä–æ–∫–∞ ---
const lang = 'bg';  
const quarter = '2025-03'; // –ì–æ–¥–∏–Ω–∞ –∏ —Ç—Ä–∏–º–µ—Å–µ—á–∏–µ
const lesson = '13';       // –ù–æ–º–µ—Ä –Ω–∞ —É—Ä–æ–∫–∞

// --- –ù–û–í–û: –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –¥–∏–Ω–∞–º–∏—á–Ω–æ –∏–º–µ –Ω–∞ —Ñ–∞–π–ª–∞ ---
// –ó–∞–º–µ–Ω—è–º–µ '-' —Å '_' –∑–∞ –ø–æ-—á–∏—Å—Ç–æ –∏–º–µ –Ω–∞ —Ñ–∞–π–ª–∞: 2025-03 -> 2025_03
const dynamicJsonFilename = `Lesson_${quarter.replace('-', '_')}_${lesson}.json`; 
// –†–µ–∑—É–ª—Ç–∞—Ç: "Lesson_2025_03_13.json"

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ —Å–µ —Å—ä–∑–¥–∞–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç –≥–æ—Ä–Ω–∏—Ç–µ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ ---
const baseUrl = `https://raw.githubusercontent.com/Adventech/sabbath-school-lessons/refs/heads/stage/src/${lang}/${quarter}/${lesson}/`;
const filesToFetch = ['info.yml', 'inside-story.md', '01.md', '02.md', '03.md', '04.md', '05.md', '06.md', '07.md'];
const folderName = 'downloaded_files';

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ GitHub Gist ---
if (!process.env.GITHUB_TOKEN) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞: GITHUB_TOKEN –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω. –ú–æ–ª—è, —Å—ä–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–µ—Ç–µ –≤–∞—à–∏—è —Ç–æ–∫–µ–Ω.');
    process.exit(1);
}
const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

if (!fs.existsSync(folderName)) {
    fs.mkdirSync(folderName);
}

/**
 * –í–ò–ù–ê–ì–ò —Å—ä–∑–¥–∞–≤–∞ –Ω–æ–≤ Gist —Å—ä—Å —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–∞ —Ñ–∞–π–ª–∞.
 * @param {string} filename - –ò–º–µ—Ç–æ –Ω–∞ —Ñ–∞–π–ª–∞ –≤ Gist.
 * @param {string} content - –°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–∞ —Ñ–∞–π–ª–∞.
 */
async function uploadNewGist(filename, content) {
    try {
        console.log(`\nüöÄ –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ Gist —Å —Ñ–∞–π–ª "${filename}"...`);
        
        const response = await octokit.gists.create({
            description: `Sabbath School Lesson - ${lang.toUpperCase()} ${quarter} L${lesson}`, // –ü–æ-–æ–ø–∏—Å–∞—Ç–µ–ª–Ω–æ –∑–∞–≥–ª–∞–≤–∏–µ –Ω–∞ Gist-–∞
            public: true,
            files: {
                [filename]: { // –¢—É–∫ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –¥–∏–Ω–∞–º–∏—á–Ω–æ—Ç–æ –∏–º–µ!
                    content: content,
                },
            }
        });

        console.log(`‚úÖ –ù–æ–≤ Gist –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! URL: ${response.data.html_url}`);

    } catch (error) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Gist:', error.message);
    }
}

async function downloadAndCombineToJson() {
    const combinedData = {};

    for (const file of filesToFetch) {
        try {
            const response = await fetch(baseUrl + file);
            if (!response.ok) throw new Error(`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ ${file}: ${response.statusText}`);
            
            const content = await response.text();
            
            fs.writeFileSync(`${folderName}/${file}`, content);
            console.log(`‚úÖ –§–∞–π–ª "${file}" –∏–∑—Ç–µ–≥–ª–µ–Ω!`);

            combinedData[file] = content;

        } catch (error) {
            console.error(`‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ ${file}:`, error.message);
            return; 
        }
    }

    const jsonContent = JSON.stringify(combinedData, null, 2);
    // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –¥–∏–Ω–∞–º–∏—á–Ω–æ—Ç–æ –∏–º–µ –∑–∞ –ª–æ–∫–∞–ª–Ω–∏—è —Ñ–∞–π–ª
    fs.writeFileSync(dynamicJsonFilename, jsonContent); 
    console.log(`\nüéâ –í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ —Å–∞ –æ–±–µ–¥–∏–Ω–µ–Ω–∏ –≤ "${dynamicJsonFilename}"!`);

    // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –¥–∏–Ω–∞–º–∏—á–Ω–æ—Ç–æ –∏–º–µ –∏ –∑–∞ –∫–∞—á–≤–∞–Ω–µ
    await uploadNewGist(dynamicJsonFilename, jsonContent);
}

downloadAndCombineToJson();