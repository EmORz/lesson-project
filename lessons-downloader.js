// –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –º–æ–¥—É–ª–∏
import fs from 'fs/promises';
import path from 'path';
import fetch from 'node-fetch';
import yaml from 'js-yaml';

// URL –∫—ä–º —Å—É—Ä–æ–≤–∏—è YAML —Ñ–∞–π–ª –≤ GitHub
const YAML_URL = 'https://raw.githubusercontent.com/Adventech/sabbath-school-lessons/refs/heads/stage/src/bg/2025-03-cc/pdf.yml';

// –ò–º–µ –Ω–∞ –ø–∞–ø–∫–∞—Ç–∞, –≤ –∫–æ—è—Ç–æ —â–µ —Å–µ –∑–∞–ø–∞–∑–≤–∞—Ç —Ñ–∞–π–ª–æ–≤–µ—Ç–µ
const DOWNLOAD_DIR = 'downloaded_lessons';

async function downloadFile(fileUrl, outputPath) {
  try {
    const response = await fetch(fileUrl);
    if (!response.ok) {
      throw new Error(`Failed to fetch ${fileUrl}: ${response.statusText}`);
    }
    const fileBuffer = Buffer.from(await response.arrayBuffer());
    await fs.writeFile(outputPath, fileBuffer);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑—Ç–µ–≥–ª–µ–Ω: ${path.basename(outputPath)}`);
  } catch (error) {
    console.error(`‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ ${fileUrl}:`, error.message);
  }
}

async function main() {
  try {
    // 1. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–∞–ø–∫–∞—Ç–∞ –∑–∞ –∏–∑—Ç–µ–≥–ª—è–Ω–µ
    await fs.mkdir(DOWNLOAD_DIR, { recursive: true });
    console.log(`üìÇ –§–∞–π–ª–æ–≤–µ—Ç–µ —â–µ –±—ä–¥–∞—Ç –∑–∞–ø–∞–∑–µ–Ω–∏ –≤ –ø–∞–ø–∫–∞: ./${DOWNLOAD_DIR}`);

    // 2. –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ YAML —Ñ–∞–π–ª–∞
    console.log('... –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Å–ø–∏—Å—ä–∫–∞ —Å —É—Ä–æ—Ü–∏ –æ—Ç YAML —Ñ–∞–π–ª–∞...');
    const response = await fetch(YAML_URL);
    if (!response.ok) {
      throw new Error(`–ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ YAML —Ñ–∞–π–ª–∞: ${response.statusText}`);
    }
    const yamlText = await response.text();
    
    // 3. –ü–∞—Ä—Å–∏—Ä–∞–Ω–µ –Ω–∞ YAML —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ
    const data = yaml.load(yamlText);
    
    if (!data || !data.pdf || !Array.isArray(data.pdf)) {
      throw new Error('YAML —Ñ–∞–π–ª—ä—Ç –∏–º–∞ –Ω–µ–æ—á–∞–∫–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞');
    }
    
    const pdfFiles = data.pdf;
    console.log(`üîé –ù–∞–º–µ—Ä–µ–Ω–∏ ${pdfFiles.length} PDF —Ñ–∞–π–ª–∞ –∑–∞ –∏–∑—Ç–µ–≥–ª—è–Ω–µ.`);

    // 4. –ò–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ
    const downloadPromises = pdfFiles.map((file, index) => {
      if (file.src) {
        // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞ —É—Ä–æ–∫–∞ –æ—Ç target –∏–ª–∏ –∏–Ω–¥–µ–∫—Å–∞
        const lessonNumber = file.target ? file.target.split('/').pop() : (index + 1).toString().padStart(2, '0');
        const fileName = `–£—Ä–æ–∫-${lessonNumber}.pdf`;
        const localPath = path.join(DOWNLOAD_DIR, fileName);
        return downloadFile(file.src, localPath);
      }
    });

    await Promise.all(downloadPromises);
    console.log('\nüéâ –í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ —Å–∞ –∏–∑—Ç–µ–≥–ª–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('\nüî• –í—ä–∑–Ω–∏–∫–Ω–∞ —Å–µ—Ä–∏–æ–∑–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–∞:', error.message);
  }
}

// –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è
main();